DECOMPOSE_COMMON_PROCESSES=( 'project-root' 'diff-skeleton' 'print-vars' )

_decompose-process-print-vars() {
  if [ "$1" ]; then
    (set -o posix; set) | grep "DECOMPOSE_" | grep --color "${@:1}"
    (set -o posix; set) | grep "PROJECT_" | grep --color "${@:1}"
  else
    echo "Core decompose variables:"
    (set -o posix; set) | grep "DECOMPOSE_"

    echo -e "\nEnvironment specific variables:"
    (set -o posix; set) | grep "PROJECT_"
  fi
}
_decompose-process-print-vars_help() {
  echo "  Print project variables"
}

# Print the project root
_decompose-process-project-root() {
  echo $(_decompose-project-root)
}
_decompose-process-project-root_help() {
  echo "  Print project root directory"
}

# Show differences between environment and skeleton
_decompose-process-diff-skeleton() {
  local project_root=$(_decompose-project-root)
  if [[ -d "$project_root/$1" || -f "$project_root/$1" ]]; then
    specified_path=$1
  fi

  # TODO: Somehow ignore generated files before diffing. Maybe clean first?
  # Is color diff available?
  local diffcommand="$(which colordiff 2> /dev/null)"
  if [ ! -n "$diffcommand" ]; then
    local diffcommand="$(which diff)"
  fi

	$diffcommand -r "$project_root/$specified_path" "$project_root"/.decompose/environment/skel/$specified_path
}
_decompose-process-diff-skeleton_help() {
  echo "  Show differences between environment and skeleton"
  echo "    Param 1: relative directory to project root to diff"
}

# Common build steps
_decompose-process-common-build() {
  echo "Building decompose templates..."
  decompose-process-templates
}

# Build version file
_decompose-process-build_version_file() {
  echo "Creating version file..."
  local project_root=$(_decompose-project-root)
  local git_base_revision="`git -C $project_root describe --tags --match=v* --always --dirty 2>&1`"
  # Set current base version
  echo -e "$PROJECT_ENVIRONMENT\n$git_base_revision\n\n$(date)" > \
    "$project_root"/"$PROJECT_VERSION_FILE"
}

# vim:syntax=sh
